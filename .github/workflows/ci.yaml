name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build-test-dockerize:
    runs-on: ubuntu-latest

    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: employee_management_system
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping --silent"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3

    steps:
    # Checkout repository
    - name: Checkout Code
      uses: actions/checkout@v3

    # ---------- BACKEND (Spring Boot) ----------
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        distribution: 'temurin'
        java-version: '17'

    - name: Wait for MySQL
      run: |
        until mysqladmin ping -h127.0.0.1 -uroot -proot --silent; do
          echo "Waiting for MySQL..."
          sleep 5
        done

    - name: Build & Test Backend
      run: |
        cd springboot-backend
        chmod +x mvnw
        ./mvnw clean verify -DskipTests=false
      env:
        SPRING_DATASOURCE_URL: jdbc:mysql://127.0.0.1:3306/employee_management_system?useSSL=false&allowPublicKeyRetrieval=true&serverTimezone=UTC
        SPRING_DATASOURCE_USERNAME: root
        SPRING_DATASOURCE_PASSWORD: root

    # # ---------- FRONTEND (Angular) ----------
    # - name: Set up Node.js
    #   uses: actions/setup-node@v3
    #   with:
    #     node-version: '18'

    # - name: Install & Test Frontend
    #   run: |
    #     cd angular-frontend
    #     npm install
    #     npm run lint
    #     npm test -- --watch=false --browsers=ChromeHeadless


    - name: Stop GitHub Actions MySQL service
      run: |
        echo "Stopping MySQL service container..."
        docker ps -a
        MYSQL_CID=$(docker ps -q --filter "ancestor=mysql:8.0")
        if [ -n "$MYSQL_CID" ]; then
          docker stop $MYSQL_CID
          docker rm $MYSQL_CID
        fi


    # ---------- DOCKER BUILD & PUSH ----------
    - name: Log in to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Set up Commit SHA as Image Tag
      run: echo "IMAGE_TAG=$(echo $GITHUB_SHA | cut -c1-7)" >> $GITHUB_ENV

    # ---------- OPTIONAL: INTEGRATION TEST WITH DOCKER COMPOSE ----------
    - name: Integration Test with Docker Compose
      run: |
        docker compose up -d
        echo "Waiting for backend service..."
        for i in {1..40}; do
          if curl -s http://localhost:8080; then
            echo "Backend is ready"
            break
          fi
          echo "Waiting... ($i/40)"
          sleep 5
        done

        echo "Checking frontend..."
        for i in {1..20}; do
          if curl -s http://localhost:4200; then
            echo "Frontend is ready"
            break
          fi
          echo "Waiting for frontend... ($i/20)"
          sleep 5
        done

        docker compose down
    - name: Build & Push Backend Image
      run: |
        docker build -t ${{ secrets.DOCKER_USERNAME }}/emp-backend:${IMAGE_TAG} -f springboot-backend/Dockerfile springboot-backend
        docker push ${{ secrets.DOCKER_USERNAME }}/emp-backend:${IMAGE_TAG}
        docker tag ${{ secrets.DOCKER_USERNAME }}/emp-backend:${IMAGE_TAG} ${{ secrets.DOCKER_USERNAME }}/emp-backend:latest
        docker push ${{ secrets.DOCKER_USERNAME }}/emp-backend:latest

    - name: Build & Push Frontend Image
      run: |
        docker build -t ${{ secrets.DOCKER_USERNAME }}/emp-frontend:${IMAGE_TAG} -f angular-frontend/Dockerfile angular-frontend
        docker push ${{ secrets.DOCKER_USERNAME }}/emp-frontend:${IMAGE_TAG}
        docker tag ${{ secrets.DOCKER_USERNAME }}/emp-frontend:${IMAGE_TAG} ${{ secrets.DOCKER_USERNAME }}/emp-frontend:latest
        docker push ${{ secrets.DOCKER_USERNAME }}/emp-frontend:latest

